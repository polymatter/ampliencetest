{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","value","setValue","sdk","setSdk","useEffect","init","then","field","getValue","setValueTo","newValue","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAqEeA,MAjDf,WACE,MAA4BC,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAAwBF,mBAAiE,IAAzF,mBAAQG,EAAR,KAAaC,EAAb,KAEAC,qBAAU,WACRC,cAAsDC,KAAKH,KAC1D,IAEHC,qBAAU,WACHF,EAAIK,OAGTL,EAAIK,MAAMC,WAAWF,KAAKG,KACzB,CAACP,IAEJ,IAAMO,EAAa,WAA+B,IAA9BC,EAA6B,uDAAN,EACpCR,EAAIK,QAGTL,EAAIK,MAAMN,SAASS,GACnBT,EAASS,KAiBX,OAAKR,EAAIK,MAIP,sBAAKI,UAAU,MAAf,0BACgBX,EACd,wBAAQY,QApBM,WACXV,EAAIK,OAGTE,EAAWT,EAAQ,IAgBjB,eACA,wBAAQY,QAdM,WACXV,EAAIK,OAGTE,EAAWT,EAAQ,IAUjB,kBANK,qBAAKW,UAAU,MAAf,0BC5CIE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.75db6750.chunk.js","sourcesContent":["import './App.css';\nimport { init } from 'dc-extensions-sdk';\nimport type { ContentFieldExtension } from 'dc-extensions-sdk';\nimport { useState, useEffect } from 'react';\n\ntype FieldModel = number;\ninterface Parameters {\n  instance: {};\n  installation: {\n    configParam: string;\n  }\n}\n\nasync function initialize() {\n  const sdk = await init<ContentFieldExtension<FieldModel, Parameters>>();\n  await sdk.field.setValue(3)\n  return sdk;\n};\n\n\nfunction App() {\n  const [ value, setValue ] = useState(0);\n  const [ sdk, setSdk ] = useState<Partial<ContentFieldExtension<FieldModel, Parameters>>>({});\n\n  useEffect(() => {\n    init<ContentFieldExtension<FieldModel, Parameters>>().then(setSdk);\n  }, []);\n\n  useEffect(() => {\n    if (!sdk.field)\n      return;\n\n    sdk.field.getValue().then(setValueTo);\n  }, [sdk])\n\n  const setValueTo = (newValue: FieldModel = 3) => {\n    if (!sdk.field)\n      return;\n\n    sdk.field.setValue(newValue);\n    setValue(newValue);\n  }\n\n  const increment = () => {\n    if (!sdk.field)\n      return;\n    \n    setValueTo(value + 1);\n  }\n\n  const decrement = () => {\n    if (!sdk.field)\n      return;\n\n    setValueTo(value - 1);\n  }\n\n  if (!sdk.field)\n    return <div className=\"App\">Loading ...</div>\n\n  return (\n    <div className=\"App\">\n      Value is ... {value}\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}