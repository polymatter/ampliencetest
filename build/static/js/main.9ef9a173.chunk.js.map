{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["a","init","sdk","field","setValue","initialize","App","useAsync","promiseFn","data","error","isLoading","getValue","value","errorValue","isLoadingValue","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qVAaA,4BAAAA,EAAA,sEACoBC,cADpB,cACQC,EADR,gBAEQA,EAAIC,MAAMC,SAAS,GAF3B,gCAGSF,GAHT,4C,0DAMAG,GA8BeC,MA5Bf,WACE,MAAmCC,YAAS,CAAEC,UAAWP,MAAjDQ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,UACrB,EAAuEJ,YAAS,CAAEC,UAAYC,EAA+BN,MAAMS,WAArHC,EAAd,EAAQJ,KAAqBK,EAA7B,EAAsBJ,MAA8BK,EAApD,EAAyCJ,UAEzC,GAAID,EACF,OAAO,sBAAKM,UAAU,MAAf,mBAA4BN,KAErC,GAAIC,EACF,OAAO,qBAAKK,UAAU,MAAf,qBAET,GAAIP,EAAM,CACR,GAAIK,EACF,OAAO,sBAAKE,UAAU,MAAf,yBAAkCF,KAE3C,GAAIC,EACF,OAAO,qBAAKC,UAAU,MAAf,2BAET,GAAIH,EACF,OACE,sBAAKG,UAAU,MAAf,0BACgBH,KAKtB,OAAO,qBAAKG,UAAU,MAAf,sBChCMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9ef9a173.chunk.js","sourcesContent":["import './App.css';\nimport { init } from 'dc-extensions-sdk';\nimport type { ContentFieldExtension } from 'dc-extensions-sdk';\nimport { useAsync } from 'react-async';\n\ntype FieldModel = number;\ninterface Parameters {\n  instance: {};\n  installation: {\n    configParam: string;\n  }\n}\n\nasync function initialize() {\n  const sdk = await init<ContentFieldExtension<FieldModel, Parameters>>();\n  await sdk.field.setValue(3)\n  return sdk;\n};\n\ninitialize();\n\nfunction App() {\n  const { data, error, isLoading } = useAsync({ promiseFn: init as any })\n  const { data: value , error: errorValue, isLoading: isLoadingValue } = useAsync({ promiseFn: (data as ContentFieldExtension).field.getValue})\n\n  if (error) \n    return <div className=\"App\">Error {error}</div>\n\n  if (isLoading)\n    return <div className=\"App\">Loading</div>\n\n  if (data) {\n    if (errorValue)\n      return <div className=\"App\">Error Value {errorValue}</div>\n\n    if (isLoadingValue)\n      return <div className=\"App\">Loading Value</div>\n\n    if (value)\n      return (\n        <div className=\"App\">\n          Value is ... {value}\n        </div>\n      );\n  }\n\n  return <div className=\"App\">Error 2</div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}