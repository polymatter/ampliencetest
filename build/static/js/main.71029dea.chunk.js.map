{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","value","setValue","sdk","setSdk","useEffect","init","then","hasLoadedSdk","field","getValue","setValueTo","newValue","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA8DeA,MA/Cf,WACE,MAA0BC,mBAAS,SAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsBF,qBAAtB,mBAAOG,EAAP,KAAYC,EAAZ,KAEAC,qBAAU,WACRC,cAAqBC,KAAKH,KACzB,IAEHC,qBAAU,WACHG,EAAaL,IAGlBA,EAAIM,MAAMC,WAAWH,KAAKI,KACzB,CAACR,IAEJ,IAAMK,EAAe,SAACL,GACpB,QAASA,GAGLQ,EAAa,WAAkC,IAAjCC,EAAgC,uDAAT,KACpCJ,EAAaL,KAGlBA,EAAIM,MAAMP,SAASU,GACnBV,EAASU,KAWX,OAAKJ,EAAaL,GAIhB,sBAAKU,UAAU,MAAf,0BACgBZ,EACd,wBAAQa,QAdM,WAChBH,EAAWV,EAAQ,QAajB,eACA,wBAAQa,QAXM,WAChBH,EAAWV,EAAQ,QAUjB,kBANK,qBAAKY,UAAU,MAAf,0BCrCIE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.71029dea.chunk.js","sourcesContent":["import './App.css';\nimport { init } from 'dc-extensions-sdk';\nimport type { ContentFieldExtension } from 'dc-extensions-sdk';\nimport { useState, useEffect } from 'react';\n\ntype FieldModel = string;\ninterface Parameters {\n  instance: {};\n  installation: {\n    configParam: string;\n  }\n}\n\ntype AmplienceSdk = ContentFieldExtension<FieldModel, Parameters>;\n\nfunction App() {\n  const [value, setValue] = useState(\"hello\");\n  const [sdk, setSdk] = useState<AmplienceSdk>();\n\n  useEffect(() => {\n    init<AmplienceSdk>().then(setSdk);\n  }, []);\n\n  useEffect(() => {\n    if (!hasLoadedSdk(sdk))\n      return;\n\n    sdk.field.getValue().then(setValueTo);\n  }, [sdk]);\n\n  const hasLoadedSdk = (sdk: AmplienceSdk | undefined): sdk is AmplienceSdk => {\n    return !!sdk;\n  }\n\n  const setValueTo = (newValue: FieldModel = \"hi\") => {\n    if (!hasLoadedSdk(sdk))\n      return;\n\n    sdk.field.setValue(newValue);\n    setValue(newValue);\n  }\n\n  const increment = () => {\n    setValueTo(value + \"hi1\");\n  }\n\n  const decrement = () => {\n    setValueTo(value + \"hi2\");\n  }\n\n  if (!hasLoadedSdk(sdk))\n    return <div className=\"App\">Loading ...</div>\n\n  return (\n    <div className=\"App\">\n      Value is ... {value}\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}